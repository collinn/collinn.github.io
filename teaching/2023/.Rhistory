head(mgp)
head(mpg)
ggplot(mpg, aes(class, hwy)) +
geom_boxplot() +
facet_wrap(~drv)
ggplot(mpg, aes(drv, hwy)) +
geom_boxplot() +
facet_wrap(~class)
ggplot(mpg, aes(class, hwy)) +
geom_boxplot() +
facet_wrap(~drv)
ggplot(mpg, aes(class, hwy, color = drv)) +
geom_boxplot()
ggplot(mpg, aes(class, hwy, fill = drv)) +
geom_boxplot()
ggplot(mpg, aes(class, hwy)) +
geom_boxplot() +
facet_wrap(~drv)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth()
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(color = drv)) +
geom_smooth()
ggplot(mpg, aes(displ, drv)) +
geom_boxplot()
ggplot(mpg, aes(displ, drv)) +
geom_boxplot() +
stat_summary(geom = "point", fun = "mean", color = "red", size = 2)
ggplot(mpg, aes(hwy, class)) +
geom_jitter() +
stat_summary(geom = "point", fun = "mean", color = "green", size = 2) +
stat_summary(geom = "point", fun = "median", color = "red", size = 2)
ggplot(mpg, aes(hwy, class)) +
geom_jitter(height = 0.15) +
stat_summary(geom = "point", fun = "mean", color = "green", size = 2) +
stat_summary(geom = "point", fun = "median", color = "red", size = 2)
## Plot 1
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(color = drv)) +
geom_smooth()
## Plot 2
ggplot(mpg, aes(displ, hwy, color = drv)) +
geom_point() +
geom_smooth()
head(mpg)
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(size = cyl))
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(size = city))
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(size = cty))
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(size = cty)) +
geom_smooth()
ggplot(mpg, aes(displ, hwy, size = cty)) +
geom_point(aes(size = cty)) +
geom_smooth()
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(size = cty))
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(size = cty))
ggplot(mpg, aes(displ, hwy, size = cty)) +
geom_point() +
geom_smooth()
ggplot(mpg, aes(displ, hwy, color = cty)) +
geom_point()
ggplot(mpg, aes(displ, hwy, color = cty)) +
geom_point() +
geom_smooth()
head(mpg)
ggplot(mpg, aes(displ, hwy, color = cyl)) +
geom_point()
ggplot(mpg, aes(displ, hwy, color = factor(cyl))) +
geom_point()
ggplot(mpg, aes(displ, hwy, color = year)) +
geom_point()
ggplot(mpg, aes(displ, hwy, color = factor(year))) +
geom_point()
ggplot(mpg, aes(displ, hwy, color = factor(year))) +
geom_boxplot()
ggplot(mpg, aes(class, hwy, color = factor(year))) +
geom_boxplot()
ggplot(mpg, aes(class, hwy, color = year)) +
geom_boxplot()
ggplot(mpg, aes(class, hwy, color = year)) +
geom_boxplot()
ggplot(mpg, aes(displ, hwy, color = cty)) +
geom_point() +
geom_smooth()
ggplot(mpg, aes(displ, hwy, color = cty)) +
geom_point()
ggplot(mpg, aes(displ, hwy, color = cyl)) +
geom_point()
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(color = cyl))
ggplot(mpg, aes(displ, hwy, color = cyl)) +
geom_point()
ggplot(mpg, aes(displ, hwy, color = cyl)) +
geom_point() +
geom_smooth()
ggplot(mpg, aes(displ, hwy, color = factor(cyl))) +
geom_point() +
geom_smooth()
ggplot(mpg, aes(displ, hwy, color = cyl)) +
geom_point()
ggplot(mpg, aes(class, hwy, color = year)) +
geom_boxplot()
ggplot(mpg, aes(displ, hwy)) +
geom_point(alpha = 0.5)
ggplot(mpg, aes(displ, hwy)) +
geom_point(alpha = 0.25)
ggplot(mpg, aes(displ, hwy)) +
geom_point(alpha = 0.25, color = "blue")
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(color = "blue"))
x <- c(1,2,3, "four", 5, "six", 7, 6, 2)
x
x <- as.numeric(x)
x
# Get rid of NA values
x <- x[c(1,2,3,5,7,8,9)]
x
## "new" vector x
x <- c(3, 7, "four", 2)
x
x <- as.numeric(x)
x
# Get rid of NA values
x <- x[c(1,2,3,5,7,8,9)]
x
## "new" vector x
x <- c(3, 7, "four", 2)
# Create a vector to add to x
y <- rep(1, length = 7)
x
y
x <- as.numeric(x)
x+y
x <- c(1,2,3, "four", 5, "six", 7, 6, 2)
shinyap
library(shinyWidgets)
cc <- c("red", "blue", "green", "yellow")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
?observe
?updateVirtualSelect
library(shiny)
library(shinyWidgets)
cc <- c("red", "blue", "green", "yellow")
ui <- fluidPage(
virtualSelectInput("var1", label = "Color 1", choices = cc, selected = cc[1]),
virtualSelectInput("var2", label = "Color 2", choices = cc, selected = cc[2])
)
server <- function(input, output) {
observe(
updateVirtualSelect("var1", label = "Color 1", choices = cc, disabledChoices = input$var2)
)
observe(
updateVirtualSelect("var2", label = "Color 2", choices = cc, disabledChoices = input$var1)
)
}
shinyApp(ui, server)
library(shiny)
library(shinyWidgets)
cc <- c("red", "blue", "green", "yellow")
ui <- fluidPage(
virtualSelectInput("var1", label = "Color 1", choices = cc),
virtualSelectInput("var2", label = "Color 2", choices = cc)
)
server <- function(input, output) {
observe(
updateVirtualSelect("var1", label = "Color 1", choices = cc, disabledChoices = input$var2)
)
observe(
updateVirtualSelect("var2", label = "Color 2", choices = cc, disabledChoices = input$var1)
)
}
shinyApp(ui, server)
source("~/.active-rstudio-document", echo=TRUE)
library(shiny)
library(shinyWidgets)
cc <- c("red", "blue", "green", "yellow")
ui <- fluidPage(
virtualSelectInput("var1", label = "Color 1", choices = cc),
virtualSelectInput("var2", label = "Color 2", choices = cc)
)
server <- function(input, output) {
observe({
tt <- input$var1
updateVirtualSelect("var1", label = "Color 1", choices = cc, disabledChoices = input$var2,
selected = tt)
})
observe(
updateVirtualSelect("var2", label = "Color 2", choices = cc, disabledChoices = input$var1)
)
}
shinyApp(ui, server)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
|
?`|`
x <- 1:3
y <- rev(3:1)
x
y
x < y
x <- c(TRUE, TRUE, FALSE)
y <- c(TRUE, FALSE, TRUE)
x || y
x | y
TRUE | TRUE
TRUE || TRUE
ui <- navbarPage("My Application",
tabPanel("Component 1",
# We just contain all of this within tabPanel 1
sidebarLayout(
sidebarPanel(
numericInput("n", label = "Number of obs:", value = 100),
sliderInput("bins", label = "Number of bins:", min = 2, max = 20, value = 10)
),
mainPanel(
plotOutput("myhist")
)
)
),
tabPanel("Component 2", "empty"),
tabPanel("Component 3", "also empty")
)
server <- function(input, output) {
n <- reactive(input$n)
bins <- reactive(input$bins)
output$myhist <- renderPlot({
X <- rnorm(n())
ggplot() + geom_histogram(aes(x = X), bins = bins())
})
}
shinyApp(ui, server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
numericInput("n", label = "Number of obs:", value = 100),
sliderInput("bins", label = "Number of bins:", min = 2, max = 20, value = 10)
),
mainPanel(
plotOutput("myhist")
)
)
)
server <- function(input, output) {
n <- reactive(input$n)
bins <- reactive(input$bins)
output$myhist <- renderPlot({
X <- rnorm(n())
ggplot() + geom_histogram(aes(x = X), bins = bins())
})
}
shinyApp(ui, server)
library(ggplot2)
cur <- ifelse(is.null(input$color), "", input$color)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
numericInput("n", label = "Number of obs:", value = 100),
sliderInput("bins", label = "Number of bins:", min = 2, max = 20, value = 10)
),
mainPanel(
plotOutput("myhist")
)
)
)
server <- function(input, output) {
n <- reactive(input$n)
bins <- reactive(input$bins)
output$myhist <- renderPlot({
X <- rnorm(n())
ggplot() + geom_histogram(aes(x = X), bins = bins())
})
}
shinyApp(ui, server)
ui <- navbarPage("My Application",
tabPanel("Component 1",
),
tabPanel("Component 2", "empty"),
tabPanel("Component 3", "also empty")
)
server <- function(input, output) {
}
shinyApp(ui, server)
ui <- navbarPage("My Application",
tabPanel("Component 1",
sidebarLayout(
sidebarPanel(
numericInput("n", label = "Number of obs:", value = 100),
sliderInput("bins", label = "Number of bins:", min = 2, max = 20, value = 10)
),
mainPanel(
plotOutput("myhist")
)
)
),
tabPanel("Component 2", "new stuff here"),
tabPanel("Component 3", "also empty")
)
server <- function(input, output) {
n <- reactive(input$n)
bins <- reactive(input$bins)
output$myhist <- renderPlot({
X <- rnorm(n())
ggplot() + geom_histogram(aes(x = X), bins = bins())
})
}
shinyApp(ui, server)
?isTRUE
isTRUE
x
x & y
x | y
library(shiny)
library(shinyWidgets)
cc <- c("red", "blue", "green", "yellow")
ui <- fluidPage(
virtualSelectInput("var1", label = "Color 1", choices = cc),
virtualSelectInput("var2", label = "Color 2", choices = cc)
)
server <- function(input, output) {
observe({
updateVirtualSelect("var1", label = "Color 1", choices = cc, disabledChoices = input$var2t)
})
observe({
updateVirtualSelect("var2", label = "Color 2", choices = cc, disabledChoices = input$var1)
})
}
shinyApp(ui, server)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
?virtualSelectInput
###################
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h2("Virtual Select (update)"),
virtualSelectInput(
inputId = "sel1",
label = "Update label:",
choices = month.name
),
verbatimTextOutput("res1"),
textInput("label_text", label = "With text:"),
textInput("label_html", label = "With HTML:"),
virtualSelectInput(
inputId = "sel2",
label = "Update selected value:",
choices = month.name
),
verbatimTextOutput("res2"),
radioButtons("selected", "Selected value:", month.name, inline = TRUE),
virtualSelectInput(
inputId = "sel3",
label = "Update choices:",
choices = tolower(month.name)
),
verbatimTextOutput("res3"),
radioButtons("choices", "Choices:", c("lowercase", "UPPERCASE"), inline = TRUE),
virtualSelectInput(
inputId = "sel4",
label = "Update choices + selected:",
choices = tolower(month.name)
),
verbatimTextOutput("res4"),
radioButtons("choices_select", "Choices:", c("lowercase", "UPPERCASE"), inline = TRUE),
virtualSelectInput(
inputId = "sel5",
label = "Disable / enable:",
choices = tolower(month.name)
),
verbatimTextOutput("res5"),
checkboxInput("disable", "Disable", value = FALSE),
checkboxInput("disableChoices", "Disable march and june", value = FALSE)
)
server <- function(input, output, session) {
output$res1 <- renderPrint(input$sel1)
observe({
req(input$label_text)
updateVirtualSelect(inputId = "sel1", label = input$label_text)
})
observe({
req(input$label_html)
updateVirtualSelect(
inputId = "sel1",
label = tags$span(input$label_html, style = "color: red;")
)
})
output$res2 <- renderPrint(input$sel2)
observe({
updateVirtualSelect(inputId = "sel2", selected = input$selected)
})
output$res3 <- renderPrint(input$sel3)
observe({
if (identical(input$choices, "lowercase")) {
updateVirtualSelect(inputId = "sel3", choices = tolower(month.name))
} else {
updateVirtualSelect(inputId = "sel3", choices = toupper(month.name))
}
})
output$res4 <- renderPrint(input$sel4)
observe({
if (identical(input$choices_select, "lowercase")) {
choices <- tolower(month.name)
} else {
choices <- toupper(month.name)
}
selected <- sample(choices, 1)
updateVirtualSelect(inputId = "sel4", choices = choices, selected = selected)
})
output$res5 <- renderPrint(input$sel5)
observe({
if (isTRUE(input$disable)) {
updateVirtualSelect(inputId = "sel5", disable = TRUE)
} else {
updateVirtualSelect(inputId = "sel5", disable = FALSE)
}
})
observe({
if (isTRUE(input$disableChoices)) {
updateVirtualSelect(inputId = "sel5", disabledChoices = c("march", "june"))
} else {
updateVirtualSelect(inputId = "sel5", disabledChoices = character(0))
}
})
}
if (interactive())
shinyApp(ui, server)
?updateVirtualSelect
library(shiny)
library(shinyWidgets)
cc <- c("red", "blue", "green", "yellow")
ui <- fluidPage(
virtualSelectInput("var1", label = "Color 1", choices = cc, selected = cc[1]),
virtualSelectInput("var2", label = "Color 2", choices = cc, selected = cc[2])
)
server <- function(input, output) {
observe({
updateVirtualSelect("var1", label = "Color 1", choices = cc, disabledChoices = input$var2,
selected = isolate(input$var1))
})
observe({
updateVirtualSelect("var2", label = "Color 2", choices = cc, disabledChoices = input$var1)
})
}
shinyApp(ui, server)
library(shiny)
library(shinyWidgets)
cc <- c("red", "blue", "green", "yellow")
ui <- fluidPage(
virtualSelectInput("var1", label = "Color 1", choices = cc, selected = cc[1]),
virtualSelectInput("var2", label = "Color 2", choices = cc, selected = cc[2])
)
server <- function(input, output) {
observe({
updateVirtualSelect("var1", label = "Color 1", choices = cc, disabledChoices = input$var2,
selected = isolate(input$var1))
})
observe({
updateVirtualSelect("var2", label = "Color 2", choices = cc, disabledChoices = input$var1,
selected = isolate(input$var2))
})
}
shinyApp(ui, server)
library(shiny)
library(shinyWidgets)
cc <- c("red", "blue", "green", "yellow", "purple", "black")
ui <- fluidPage(
virtualSelectInput("var1", label = "Color 1", choices = cc, selected = cc[1]),
virtualSelectInput("var2", label = "Color 2", choices = cc, selected = cc[2])
virtualSelectInput("var2", label = "Color 3", choices = cc, selected = cc[3])
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
library(shiny)
library(shinyWidgets)
cc <- c("red", "blue", "green", "yellow", "purple", "black")
ui <- fluidPage(
virtualSelectInput("var1", label = "Color 1", choices = cc, selected = cc[1]),
virtualSelectInput("var2", label = "Color 2", choices = cc, selected = cc[2]),
virtualSelectInput("var3", label = "Color 3", choices = cc, selected = cc[3])
)
server <- function(input, output) {
observe({
# For var1, the disabled choices are var2 and var3
# Because this is in observe, this update function will run whenever
# var2 or var3 will change
# By wrapping var1 in isolate(), we prevent this from trying to
# update anytime it changes
updateVirtualSelect("var1", label = "Color 1", choices = cc,
disabledChoices = c(input$var2, input$var3),
selected = isolate(input$var1))
})
observe({
updateVirtualSelect("var2", label = "Color 2", choices = cc,
disabledChoices = c(input$var1, input$var3),
selected = isolate(input$var2))
})
observe({
updateVirtualSelect("var3", label = "Color 3", choices = cc,
disabledChoices = c(input$var1, input$var2),
selected = isolate(input$var3))
})
}
shinyApp(ui, server)
input <- list()
input$artist <- "Britney Spears"
?plotly::layout
